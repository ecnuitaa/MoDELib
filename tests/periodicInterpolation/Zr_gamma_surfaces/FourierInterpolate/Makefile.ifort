# Use make to compile the program

BIN = ..
MODULES = ./Modules

# Intel fortran compiler
F90 = ifort
# Debugging on Linux (ifort)
#F90FLAGS = -O0 -fpe0 -CB -check all -e95 -std95 -traceback -warn all -module $(MODULES) -I $(MODULES)
#F90FLAGS = -O0 -fpe0 -CB -e95 -std95 -traceback -warn all -module $(MODULES) -I $(MODULES)
#F90FLAGS = -O0 -fpe0 -CB -traceback -warn all -module $(MODULES) -I $(MODULES)
# Optimizing on Linux (ifort)
#  Do not use option -axN
F90FLAGS = -O3 -ip -module $(MODULES) -I $(MODULES)
F77 = $(F90)
F77FLAGS = $(F90FLAGS)

# You need to define here Blas and Lapack libraries 
#   here the MKL is used for Blas and Lapack
LIBLOC =  -L$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -lm

### End of options #########################################################

##################################
LD = $(F90)
LDFLAGS = $(F90FLAGS)
export F90
export F90FLAGS
export F77
export F77FLAGS

##################################
.PHONY: force_look
.PRECIOUS: 
.SUFFIXES: .f .f90 .o .a

%.o: %.f
	$(F77) $(F77FLAGS) -c $<

%.a: %.f
	$(F77) $(F77FLAGS) -c $<
	ar rv $@ $%
	@rm -f $%

%.o: %.f90
	$(F90) $(F90FLAGS) -c $<

%.a: %.f90
	$(F90) $(F90FLAGS) -c $<
	ar rv $@ $%
	@rm -f $%

all:	fourierInterpolate1D fourierInterpolate1D_linear fourierFit1D fourierInterpolate2D fourierFit2D fourierFit2D_sym fourierMinPath2D
fourierInterpolate1D: $(BIN)/fourierInterpolate1D
fourierInterpolate1D_linear: $(BIN)/fourierInterpolate1D_linear
fourierFit1D: $(BIN)/fourierFit1D
fourierInterpolate2D: $(BIN)/fourierInterpolate2D
fourierFit2D: $(BIN)/fourierFit2D
fourierFit2D_sym: $(BIN)/fourierFit2D_sym
fourierMinPath2D: $(BIN)/fourierMinPath2D

$(MODULES):
	@mkdir $(MODULES)

clean:
	@rm -f *.o $(MODULES)/*.mod $(MODULES)/*__genmod.f90

fourier2D_sym.o: symmetry2D.o

OBJECTS1D = comment.o lectureGrid1D.o fourier1D.o mainInterpolate1D.o
$(BIN)/fourierInterpolate1D: $(MODULES) $(OBJECTS1D) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierInterpolate1D $(OBJECTS1D) $(LIBLOC)

OBJECTS1D_linear = comment.o lectureGrid1D.o fourier1D.o mainInterpolate1D_linear.o
$(BIN)/fourierInterpolate1D_linear: $(MODULES) $(OBJECTS1D_linear) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierInterpolate1D_linear $(OBJECTS1D_linear) $(LIBLOC)

OBJECTS1D_fit = comment.o lecture1D.o fourier1D.o mainFit1D.o
$(BIN)/fourierFit1D: $(MODULES) $(OBJECTS1D_fit) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierFit1D $(OBJECTS1D_fit) $(LIBLOC)

OBJECTS2D = math.o comment.o lectureGrid2D.o fourier2D.o mainInterpolate2D.o
$(BIN)/fourierInterpolate2D: $(MODULES) $(OBJECTS2D) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierInterpolate2D $(OBJECTS2D) $(LIBLOC)

OBJECTS2D_min = math.o comment.o fourier2D.o constraint2D.o minimum.o mainMinPath2D.o
$(BIN)/fourierMinPath2D: $(MODULES) $(OBJECTS2D_min)
	$(LD) $(LDFLAGS) -o $(BIN)/fourierMinPath2D $(OBJECTS2D_min) $(LIBLOC)

OBJECTS2D_FIT = math.o comment.o lecture2D.o fourier2D.o mainFit2D.o
$(BIN)/fourierFit2D: $(MODULES) $(OBJECTS2D_FIT) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierFit2D $(OBJECTS2D_FIT) $(LIBLOC)

OBJECTS2D_FIT_SYM = math.o comment.o lecture2D.o symmetry2D.o fourier2D.o fourier2D_sym.o mainFit2D_sym.o
$(BIN)/fourierFit2D_sym: $(MODULES) $(OBJECTS2D_FIT_SYM) 
	$(LD) $(LDFLAGS) -o $(BIN)/fourierFit2D_sym $(OBJECTS2D_FIT_SYM) $(LIBLOC)
