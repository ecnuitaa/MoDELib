NEW LOOP_NETWORK CODE
- Mobility specific to slip system
- Make Loops with |Burgers|>1 sessile
- Finish IO in bin format
- Rework crossslip
- Use StressStright for straight segments
- New external stress load controller
- Microstructure generator with different distributions
- DDvtk movies
- DDvtk cannot interrupt autoplay
- DDvtk plots
- New time integrator
- DipolarMicrostructureGenerator for Bcc/Hcp
- Natural Cubic Splines
- Merge loops on same plane
- Non-convex domains (each grain convex?)
- Documentation
- Hoffman2 documentation (see emails between Yinan and Raffaella)
- SpaceDecompositin based on KD-tree
- Replace const static with constexpr in LagrangeElement and DiscontinuousLagrange http://www.cplusplus.com/forum/general/121300/
- Make all quadratures constexpr
- Use constexpr std::array for quadrature
- Don’t multipole expand displacement. Use loop structure to compute it
- Make LatticePlane and LatticePlaneBase templated by dim
- mesh search algorithms for non-convex domains (e.g. foam)
- GPU computation
- Implement cracks
- DislocationSegment::is_boundarySegment() must use mid point (not normals) to push segments to corners
- Assemble and solve is taking too long (> particle interaction). Can we assemble scalar system of equations? Null-space solver?
- display help in DDvtk
- re-enable moving plot panel in DDvtk
- Convex decomposition of Mesh (http://masc.cs.gmu.edu/wiki/ACD)
- Non convex domains changes: barycentric search algorithm, PlaneMeshIntersection::planeMeshIntersection, virtual segments, initial microstructure
- Use CGAL
- SplineIntersection::planePlaneType uses the wrong tolerance (10x)
- If T0=0 or T1=0, then rl(0)=0/0=NaN !!!!! This is not true since rl still tends to a finite vector. Remove class Parametric curve and implement special case of rl at 0 and 1 for vanishing nodal tangents
- cellSize should depend on applied load. Or better the number of cell neighbors used in each cell should depend on the applied stress to that cell
- Implement operator << SpatialCell
- iterate on JunctionFormation until no junctions if found
- iterate on Remesh
- DislocationJunction: take care of source-source, source-sink, and sink-sink cases
- Optimize Remesh
- clean up BoundingLineSegments. Use LineSegment class instead of pair<VectorDim,VectorDim>
- DislocationJunctions: IF CONTRACT DID NOT HAPPEN REMOVE NODES THAT WERE CREATED BY EXPANSION. STORE IDS IN CONTAINER AND THEN REMOV
- Form GB junctions??
- Stress field is absent in some segments for evaluation of transmission criterion
- bring createNodeList to TrialFunction (node lists are in created to set a dirichlet condition for a particular trial function). Make fe const in trial function.
- add FiniteElement::mesh2femNode(const size_t& meshNodeID)
- IMPLEMENT FUNCTION TO DEFINE THE OUT-DIR FOR EACH LOOP LINK. THIS IS BASED ON THE INTERSECTION OF A SEM-ILINE WITH THE LOOP IN THE PLANE. NUMBER OF INTERSECTIONS TELLS INSIDE OR OUTSIDE
- junction detection using linking number
- topological operation to split a node into many nodes, one per loops connected. Similar to “remove”. This is actually a remove followed by many expansions
-THE PROBLEM IS THAT IF F FOR A NODE IS ZERO, THE VELOCITY IS NOT ZERO, THIS IS WHY PURE ZERO-B NODES MOVE
- RELATED TO THIS, WE NEED TO MERGE LOOPS ON THE SAME PLANE
-THERE IS ALSO A PROBLEM WITH THE TRIANGULATION FOR CROSSING LOOPS
- We should always assume that velocity within a segment is interpolated linearly, so no need for complex assembly construction for curved segments (i.e. matrix Mseg is identity)
- deg fault at end of simulation may be due to
Assertion failed: (success==1 && "COULD NOT ERASE GLIDE PLANE POINTER FROM GLIDE PLANE OBSERVER."), function removeGlidePlane, file ../../../model/DislocationDynamics/GlidePlanes/GlidePlaneObserver.h, line 185.
- Add feature to perform alternating loads (ramp up-ramp down)

ERRORS
1) FIXED 
remeshing network: contracting... Assertion failed: (boundingBoxSegments().size()==1 && "There should be only one line in boundingBoxSegments()"), function updateGlidePlaneIntersections, file ../../../model/DislocationDynamics/DislocationNode.h, line 115.
2) Assertion failed: (false && "BOUNDARY NODES MUST HAVE A NON-ZERO NORMAL"), function set_P, file ../../../model/DislocationDynamics/DislocationNode.h, line 1123.
Abort trap: 6
3) THIS IS BECASUSE WE DON'T CHECK THE OUTPUT OF DislocaationNode::set_P in DislocationNodeContraction
		remeshing network: contracting... Assertion failed: (gp.contains(this-> sink->get_P()) && "Glide Plane does not contain sink"), function addGlidePlane, file ../../../model/DislocationDynamics/DislocationSegment.h, line 270.
4) 		remeshing network: expanding... Assertion failed: (0 && "Intersection must be COINCIDENT or INCIDENT."), function updateGlidePlaneIntersections, file ../../../model/DislocationDynamics/DislocationNode.h, line 188.
