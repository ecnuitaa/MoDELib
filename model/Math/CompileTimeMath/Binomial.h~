#ifndef ootndd_BINOMIAL_H_
#define ootndd_BINOMIAL_H_

#include <ootndd/Utilities/Factorial.h>

namespace ootndd {
	
	//////////////////////////////////////////////////////////////////////////
	template< int N, int k>
	struct Binomial {
		enum { value = Factorial<N>::value / (Factorial<N-k>::value * Factorial<k>::value)};
		
//		template<typename T>
//		T operator+(const T & rhs){return value+rhs;}
//		
//		template<typename T>
//		T operator-(const T & rhs){return value-rhs;}
//		
//		template<typename T>
//		T operator*(const T & rhs){return value*rhs;}
//		
//		template<typename T>
//		T operator/(const T & rhs){return value/rhs;}
	};
	
//	template<>
//	struct Factorial<0> {
//		enum { value = 1 };
//	};
	
	//////////////////////////////////////////////////////////////////////////
} // end namespace ootndd

#endif