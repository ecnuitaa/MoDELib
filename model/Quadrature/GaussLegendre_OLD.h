/* This file is part of MODEL, the Mechanics Of Defect Evolution Library.
 *
 * Copyright (C) 2011 by Giacomo Po <gpo@ucla.edu>.
 *
 * model is distributed without any warranty under the 
 * GNU General Public License (GPL) v2 <http://www.gnu.org/licenses/>.
 */

#ifndef model_GAUSSLEGENDRE_H_
#define model_GAUSSLEGENDRE_H_


#include <assert.h>
#include <model/Quadrature/QuadratureRecursiveRelation.h>

namespace model {
	
	/**************************************************/
	/* GaussLegendre: general case                    */
	/**************************************************/
	/*! \brief Class template defining the GaussLegendre rules for determination 
	 *	of quadrature abscissas and weights.
	 */
	template<short unsigned int dim, short unsigned int qOrder>
	struct GaussLegendre{
		
		
		
		GaussLegendre(){
			assert(0 && "GaussLegendre: dimensionality not implemented.");
		}
		
	};
	
	
	/**************************************************/
	/* GaussLegendre: template specialization dim=1   */
	/**************************************************/
	/*! \brief The
	 *	P_n(x) = (2n-1)/n * x * P_(n-1) - (n-1)/n * P_(n-2)
	 *
	 *	gives:
	 *	A_n = (2*n-1)/n
	 *	B_n = 0
	 *	C_n = (n-1)/n
	 *
	 *	
	 *	
	 *	References:
	 *	[1] Golub, G.H., and Welsch, J.H. 1969, "Calculation of Gauss Quadrature Rules", 
	 *		Mathematics of Computation, vol. 23, pp. 221â€“230.
	 *
	 *	[2] Press, W. et al. "Numerical Recipes", 3rd edition, p.188.
	 *	
	 */
	template<short unsigned int qOrder>
	struct GaussLegendre<1,qOrder> : public QuadratureRecursiveRelation<GaussLegendre<1,qOrder>,qOrder>{
		
		/*! \brief Class template defining the coefficients A, B and C 
		 *  of the recursive relation for orthogonal Legendre polinomials:
		 *	P_n(x) = (A_n*x+B_n) * P_(n-1) - C_n * P_(n-2)
		 */
		
		
		//! The coefficient a
		static double a(const int& n){
			return (2.0*n-1.0)/n;
		}
		
		//! The coefficient b
		static double b(const int& n){
			return 0.0*n;
		}
		
		//! The coefficient c 
		static double c(const int& n){
			return (n-1.0)/n;
		}
		
	};
	
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<2,1>{
		static Eigen::Matrix<double,3,1> abcsissasAndWeights(){
			Eigen::Matrix<double,3,1> U;
			U(0,0)= 3.333333333333333e-01;		U(2,0)= 5.000000000000000e-01;
			U(1,0)= 3.333333333333333e-01;
			return U;
		}
	};
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<2,3>{
		static Eigen::Matrix<double,3,3> abcsissasAndWeights(){
			Eigen::Matrix<double,3,3> U;
			U(0,0)=  1.666666666666667e-01;		U(2,0)= 1.666666666666667e-01;
			U(1,0)=  1.666666666666667e-01;		
			U(0,1)=	 6.666666666666667e-01;		U(2,1)= 1.666666666666667e-01;
			U(1,1)=  1.666666666666667e-01;
			U(0,2)=  1.666666666666667e-01;		U(2,2)= 1.666666666666667e-01;
			U(1,2)=  6.666666666666667e-01;
			return U;
		}
	};
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<2,4>{
		static Eigen::Matrix<double,3,4> abcsissasAndWeights(){
			Eigen::Matrix<double,3,4> U;
			U(0,0)= 3.333333333333333e-01;		U(2,0)=-2.812500000000000e-01; // yes, negative sign
			U(1,0)= 3.333333333333333e-01;	
			U(0,1)= 2.000000000000000e-01;		U(2,1)= 2.604166666666667e-01;
			U(1,1)= 2.000000000000000e-01;	
			U(0,2)= 6.000000000000000e-01;		U(2,2)= 2.604166666666667e-01;
			U(1,2)= 2.000000000000000e-01;	
			U(0,3)= 2.000000000000000e-01;		U(2,3)= 2.604166666666667e-01;
			U(1,3)= 6.000000000000000e-01;
			return U;
		}
	};
	
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<2,37>{
		// from http://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
		static Eigen::Matrix<double,3,37> abcsissasAndWeights(){
			Eigen::Matrix<double,37,3> U;
			U<<
			0.333333333333333,  0.333333333333333,  0.051739766065744,
			0.950275662924106,  0.024862168537947,  0.008007799555565,
			0.024862168537947,  0.950275662924106,  0.008007799555565,
			0.024862168537947,  0.024862168537947,  0.008007799555565,
			0.171614914923835,  0.414192542538082,  0.046868898981822,
			0.414192542538082,  0.171614914923835,  0.046868898981822,
			0.414192542538082,  0.414192542538082,  0.046868898981822,
			0.539412243677190,  0.230293878161405,  0.046590940183976,
			0.230293878161405,  0.539412243677190,  0.046590940183976,
			0.230293878161405,  0.230293878161405,  0.046590940183976,
			0.772160036676533,  0.113919981661734,  0.031016943313796,
			0.113919981661734,  0.772160036676533,  0.031016943313796,
			0.113919981661734,  0.113919981661734,  0.031016943313796,
			0.009085399949835,  0.495457300025082,  0.010791612736631,
			0.495457300025082,  0.009085399949835,  0.010791612736631,
			0.495457300025082,  0.495457300025082,  0.010791612736631,
			0.062277290305887,  0.468861354847056,  0.032195534242432,
			0.468861354847056,  0.062277290305887,  0.032195534242432,
			0.468861354847056,  0.468861354847056,  0.032195534242432,
			0.022076289653624,  0.851306504174348,  0.015445834210702,
			0.022076289653624,  0.126617206172027,  0.015445834210702,
			0.851306504174348,  0.022076289653624,  0.015445834210702,
			0.851306504174348,  0.126617206172027,  0.015445834210702,
			0.126617206172027,  0.022076289653624,  0.015445834210702,
			0.126617206172027,  0.851306504174348,  0.015445834210702,
			0.018620522802521,  0.689441970728591,  0.017822989923179,
			0.018620522802521,  0.291937506468888,  0.017822989923179,
			0.689441970728591,  0.018620522802521,  0.017822989923179,
			0.689441970728591,  0.291937506468888,  0.017822989923179,
			0.291937506468888,  0.018620522802521,  0.017822989923179,
			0.291937506468888,  0.689441970728591,  0.017822989923179,
			0.096506481292159,  0.635867859433873,  0.037038683681385,
			0.096506481292159,  0.267625659273968,  0.037038683681385,
			0.635867859433873,  0.096506481292159,  0.037038683681385,
			0.635867859433873,  0.267625659273968,  0.037038683681385,
			0.267625659273968,  0.096506481292159,  0.037038683681385,
			0.267625659273968,  0.635867859433873,  0.037038683681385;
			return U.transpose();
		}
	};
	
	
	
	
	
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<3,1>{
		
		static Eigen::Matrix<double,4,1> abcsissasAndWeights(){
			Eigen::Matrix<double,4,1> U;
			U(0,0)= 2.500000000000000e-01;		U(3,0)= 1.666666666666667e-01;
			U(1,0)= 2.500000000000000e-01;	
			U(2,0)= 2.500000000000000e-01;
			return U;
		}
	};
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<3,4>{
		//a=(5-sqrt(5))/20=1.381966011250105e-01
		//b=(5+3*sqrt(5))/20=5.854101966249685e-01
		static Eigen::Matrix<double,4,4> abcsissasAndWeights(){
			Eigen::Matrix<double,4,4> U;
			U(0,0)=  1.381966011250105e-01;		U(3,0)= 4.166666666666667e-02;
			U(1,0)=  1.381966011250105e-01;		
			U(2,0)=  1.381966011250105e-01;
			
			U(0,1)=	 1.381966011250105e-01;		U(3,1)= 4.166666666666667e-02;
			U(1,1)=  5.854101966249685e-01;
			U(2,1)=  1.381966011250105e-01;
			
			U(0,2)=  1.381966011250105e-01;		U(3,2)= 4.166666666666667e-02;
			U(1,2)=  1.381966011250105e-01;
			U(2,2)=  5.854101966249685e-01;
			
			U(0,3)=  5.854101966249685e-01;		U(3,3)= 4.166666666666667e-02;
			U(1,3)=  1.381966011250105e-01;
			U(2,3)=  1.381966011250105e-01;
			return U;
		}
	};
	
	//////////////////////////////////////////////////////////////
	template <>
	struct GaussLegendre<3,5> {
		static Eigen::Matrix<double,4,5> abcsissasAndWeights(){
			Eigen::Matrix<double,4,5> U;
			U(0,0)=  2.500000000000000e-01;		U(3,0)= -1.333333333333333e-01;
			U(1,0)=  2.500000000000000e-01;		
			U(2,0)=  2.500000000000000e-01;
			
			U(0,1)=	 1.666666666666667e-01;		U(3,1)= 7.500000000000000e-02;
			U(1,1)=  1.666666666666667e-01;
			U(2,1)=  1.666666666666667e-01;
			
			U(0,2)=  1.666666666666667e-01;		U(3,2)= 7.500000000000000e-02;
			U(1,2)=  5.000000000000000e-01;
			U(2,2)=  1.666666666666667e-01;
			
			U(0,3)=  1.666666666666667e-01;		U(3,3)= 7.500000000000000e-02;
			U(1,3)=  1.666666666666667e-01;
			U(2,3)=  5.000000000000000e-01;
			
			U(0,4)=  5.000000000000000e-01;		U(3,4)= 7.500000000000000e-02;
			U(1,4)=  1.666666666666667e-01;
			U(2,4)=  1.666666666666667e-01;
			return U;
		}
	};
	
	
	//////////////////////////////////////////////////////////////
} // namespace model
#endif

