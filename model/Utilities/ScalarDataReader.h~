#ifndef mmdl_SCALARDATAREADER_H_
#define mmdl_SCALARDATAREADER_H_

#include <iostream>
#include <typeinfo>
//#include <sstream>
//#include <fstream>

#include <mmdl/Utilities/DataReader.h>

namespace mmdl  {
	
	
	class ScalarDataReader : virtual public DataReader{
	
	private:
				
		
		
	public:
		
		template <typename T>
		bool readScalarInFile(const std::string & fileName_in, const std::string & varName_in, const size_t & occurrence_in, T & value);
		
		template <typename T>
		bool readScalarInFile(const std::string & fileName_in, const std::string & varName_in, T & value);
	//	const std::vector<std::vector<double> > & get_table(){return table;}
	
	};
	//////////////////////////////////////////////////////////////////////////	
	//////////////////////////////////////////////////////////////////////////	

	
	template <typename T>
	bool ScalarDataReader::readScalarInFile(const std::string & fileName_in, const std::string & varName_in, T & value){
	
		return readScalarInFile(fileName_in, varName_in, 0, value);
	}
	
	template <typename T>
	bool ScalarDataReader::readScalarInFile(const std::string & fileName_in, const std::string & varName_in, const size_t & occurrence_in, T & value){
		
		bool success=0;
		DataReader::readInFile(fileName_in, varName_in, occurrence_in);
		
		if(get_table().size()==1 && get_table()[0].size()==1){
			value=get_table()[0][0];
			std::cout<<varName_in<<"="<<value<<" (scalar "<< typeid(value).name()<<")"<<std::endl;
			success=1;
		}
		else{
			std::cout<<"Error in reading the "<<occurrence_in<<"-th occurrence of "<<varName_in << " in "<<fileName_in;
			std::cout<<": not a scalar."<<std::endl;
			exit (1);
		
		}
		
		return success;
	}
	
		
		//////////////////////////////////////////////////////////////////////////
}
#endif
