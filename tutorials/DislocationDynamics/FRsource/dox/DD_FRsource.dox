namespace model {
/*! \page FRsource Getting Started: a simple FR source

In this tutorial we cover the necessary steps to get a minimal  DD simulation running with MODEL. All files necessary to compile and run this tutorial are located in <MODELDIR>/tutorials/DislocationDynamics/FRsource.


\section FRsource_main The source file (main.cpp)
The source file is main.cpp. This file contains the following code:
\include DislocationDynamics/FRsource/main.cpp
If you know a little C++, this code is pretty self-explanatory. After including the necessary headers, all we do in the main function is:
- create an instance, named DN, of type DislocationNetwork by specifying a series of template parameters. These parameter are:
	- 3 is the dimensionality of the space (three dimensions)
	- 1 is the degree of parametric continuity at the SplineNode(s): 0= position continuity, 1= position and tangent continuity, 2 = position, tangent, and curvature continuity. 
	- CatmullRom is the type of splines used. Alternatively, you can use Hermite splines
	- centripetal is the type of spline parametrization used. Alternatively you can use uniform, or chordal
	- 16 means that sixteen quadrature points per DislocationSegment are used for numerical integration
	- UniformOpen is the type of quadrature used. Alternatively you can use GaussLegendre.
- call the method DislocationNetwork::runSteps() on DN. This runs a fixed number of simulations time steps defined by the variable \b Nsteps in the input file \b DDinput.txt (see below). Alternatively you can run the simulation for a fixed amount of time (see DislocationNetwork::runTime()). You can also call the two methods consecutively or place them in a more complex for loop.


\section FRsource_makefile Compiling: the Makefile
If all necessary external libraries have been installed (see \ref DD_installation), compilation of the source code above can conveniently be done using the provided Makefile. In order to use the Makefile, first change the working directory of your terminal into the directory containing the files of this tutorial:
\verbatim
cd <MODELDIR>/tutorials/DislocationDynamics/FRsource
\endverbatim

The same Makefile can now be used to compile both the serial version and the parallel version (MPI) of the code. The serial version can be compiled executing the following command in your terminal:
\verbatim
make serial
\endverbatim
This compiles the source code into the executable \b DDserial. 

Similarly, The parallel version (MPI) of the code can be compiled using:
\verbatim
make parallel 
\endverbatim
This creates the executable \b DDparallel. Compiling the parallel version requires that both \ref openmpi and \ref metis are correctly installed in your system.


\section FRsource_run Running DDserial and DDparallel

The serial version of the code can be run executing:
\verbatim
./DDserial
\endverbatim

On the other hand, the parallel version of the code can be run executing:
\verbatim
mpirun -np N DDparallel
\endverbatim
where \b N is the number of processors to be used.

Are you curious to see what running the code produced? Then jump to the next tutorial, where you learn how to use \ref DD_visualization. Otherwise, just keep reading for more explanation.

\section FRsource_input Input files

The first thing that a DislocationNetwork does is to read the some input files. These files are:
- the vertex file V/V_0.txt
- the edge file E/E_0.txt
- the configuration file DDinput.txt


\section FRsource_output Output files
In MODEL, code outputs are highly customizable. However, two standard outputs are always generated because they are needed for visualization and restart purposes. These are the vertex files and the edge files. These files are stored in different folders (the "V" folder and the "E" folder, respectively), and are numbered according to the simulation time step. For example, the 114-th simulation time step generates the following files:
- V/V_114.txt
- E/E_114.txt

These files have the exact same format of the files V/V_0.txt and E/E_0.txt that have been used as inputs. In fact, any output file can be used as an input file. To (re)start a simulation at a specific time step, say 114, change the parameter \b startAtTimeStep in DDinput.txt:
\verbatim
startAtTimeStep = 114;
\endverbatim

The frequency  of output can easily be set by the variable  \b outputFrequency in \b DDinput.txt. For example, setting
\verbatim
outputFrequency=7;
\endverbatim
will force the code to output files every 7 time simulation steps.


Other standard output files can optionally be generated by turning on some flags in DDinput.txt. These flags are:
\verbatim
outputGlidePlanes=1;
outputSpatialCells=1;
outputPKforce=1;
\endverbatim





 */ 
}
