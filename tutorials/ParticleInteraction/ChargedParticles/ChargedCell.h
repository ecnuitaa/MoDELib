/* This file is part of MODEL, the Mechanics Of Defect Evolution Library.
 *
 * Copyright (C) 2012 by Giacomo Po <gpo@ucla.edu>
 * Copyright (C) 2012 by Shao-Ching Huang <sch@ucla.edu>
 * Copyright (C) 2012 by Tajendra Singh <tvsingh@ucla.edu>
 * Copyright (C) 2012 by Tamer Crosby <tcrosby@ucla.edu>
 *
 * MODEL is distributed without any warranty under the
 * GNU General Public License (GPL) v2 <http://www.gnu.org/licenses/>.
 */

#ifndef _ChargedCell_h
#define _ChargedCell_h

#include <Eigen/Dense>
#include <model/SpaceDecomposition/SpaceCell.h>
#include <model/Utilities/TypeTraits.h>


double cellSize= 1000.0;

/**************************************************************************/
/* TRAITS *****************************************************************/
class ChargedParticle;

struct ChargedCell;

template<>
struct TypeTraits<ChargedParticle> {
    //enum {dim=3;}
    typedef ChargedParticle ParticleType;
    typedef ChargedCell     CellType;
};

template<>
struct TypeTraits<ChargedCell> {
    typedef ChargedParticle ParticleType;
    typedef ChargedCell     CellType;
};


struct ChargedCell : public SpaceCell<ChargedCell>{
    
    typedef typename TypeTraits<DislocationCell<dim,cellSize> >::ParticleType ParticleType;
    typedef SpaceCell<DislocationCell<dim,cellSize>,dim,cellSize> Base;
    typedef typename Base::CellMapType CellMapType;
    typedef typename Base::VectorDimI VectorDimI;
    typedef typename Base::VectorDimD VectorDimD;
    
    typedef Eigen::Matrix<double,dim,dim>  MatrixDimD;
    MatrixDimD alpha;	// the dislocation density tensor
    MatrixDimD nearStress;	// the stress field generated by near cells at the center of this
    MatrixDimD  farStress;	// the stress field generated by  far cells at the center of this
    
public:
    
    
    /* Constructor *******************************************/
    DislocationCell(const VectorDimI& cellID_in) :
    /* Base constructor */ Base::SpaceCell(cellID_in),
    /* init list        */ alpha(MatrixDimD::Zero()),
    /* init list        */ nearStress(MatrixDimD::Zero()),
    /* init list        */  farStress(MatrixDimD::Zero()){
    }
    
    
    /* multipoleStress ****************************************/
    MatrixDimD multipoleStress(const VectorDimD& Rfield) const {
        return MultipoleExpansion<dim>::multipoleStress(Rfield,alpha,this->center);
    }
    
    
    /* computeCenterStress ************************************/
    void computeCenterStress(){
        if(ParticleType::nearCellStressApproximation==ParticleType::CELL_CELL){ // near stress is computed using cell-cell
            for (typename CellMapType::const_iterator nearCellIter=this->nearCellsBegin();nearCellIter!=this->nearCellsEnd();++nearCellIter){
                nearStress+= nearCellIter->second->multipoleStress(this->center);
            }
        }
        if(ParticleType::farCellStressApproximation==ParticleType::CELL_CELL){ // far stress is computed using cell-cell
            for (typename CellMapType::const_iterator farCellIter=this->farCellsBegin();farCellIter!=this->farCellsEnd();++farCellIter){
                farStress+= farCellIter->second->multipoleStress(this->center);
            }
        }
    }
    
};

#endif
